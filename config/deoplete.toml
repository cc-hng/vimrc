
[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = 'context_filetype.vim'
on_event = 'InsertEnter'
hook_source = '''
  execute 'source' vimrc#expand('rc/plugin/deoplete.vim')
  call deoplete#enable()
'''

[[plugins]]
repo = 'ncm2/float-preview.nvim'
on_source = 'deoplete.nvim'
if = 'has("nvim")'
hook_source = '''
  let g:float_preview#docked = 0
  let g:float_preview#max_width = 60
  let g:float_preview#max_height = 20
'''

[[plugins]]
repo = 'Shougo/deoplete-lsp'
on_source = 'deoplete.nvim'
hook_source = '''
'''

[[plugins]]
repo = 'neovim/nvim-lsp'
on_source = 'deoplete.nvim'
hook_source = '''

lua << EOF
  local lsp = require 'nvim_lsp'
  local root_pattern = function(...)
	local old_f = lsp.util.root_pattern(...)
	return function(startpath)
	  return old_f(startpath) or vim.fn.fnamemodify(filepath, ':h')
	end
  end

  -- rust
  lsp.rls.setup {
    cmd = {'rls'},
    filetypes = {'rust'},
    root_dir = root_pattern('Cargo.toml'),
  }

  -- go
  lsp.gopls.setup {
    cmd = {'gopls'},
    filetypes = {'go'},
    root_dir = root_pattern('go.mod', '.git'),
  }

  -- lua
  lsp.sumneko_lua.setup {
    filetypes = {'lua'},
    root_dir = root_pattern('.git'),
  }

  -- c/c++
  lsp.clangd.setup {
    cmd = { "clangd", "--background-index" },
    filetypes = {"c", "cpp", "objc", "objcpp"},
    root_dir = root_pattern("compile_commands.json", "compile_flags.txt", ".git"),
  }
EOF

" key mappings
  nnoremap <silent> gd    <cmd>lua vim.lsp.buf.declaration()<CR>
  nnoremap <silent> <c-]> <cmd>lua vim.lsp.buf.definition()<CR>
  nnoremap <silent> K     <cmd>lua vim.lsp.buf.hover()<CR>
  nnoremap <silent> gD    <cmd>lua vim.lsp.buf.implementation()<CR>
  nnoremap <silent> <c-k> <cmd>lua vim.lsp.buf.signature_help()<CR>
  nnoremap <silent> 1gD   <cmd>lua vim.lsp.buf.type_definition()<CR>
  nnoremap <silent> gr    <cmd>lua vim.lsp.buf.references()<CR>

'''

